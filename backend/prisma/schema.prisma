generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ==================== ENUMS ====================

enum UserStatus {
  ACTIVE
  IN_ACTIVE
  DELETE
}

enum AccountType {
  PERSONAL
  BUSINESS
}

enum CommissionType {
  FLAT
  PERCENTAGE
}

enum TxStatus {
  PENDING
  SUCCESS
  FAILED
  REVERSED
  REFUNDED
  CANCELLED
}

enum CommissionScope {
  ROLE
  USER
}

enum Env {
  PROD
  STAGING
}

enum LedgerEntryType {
  DEBIT
  CREDIT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum KycStatus {
  PENDING
  VERIFIED
  REJECT
}

enum KycTypes {
  AEPS
  USER_KYC
}

enum Currency {
  INR
  USD
  EUR
  GBP
  AED
}

enum ReferenceType {
  TRANSACTION
  COMMISSION
  REFUND
  ADJUSTMENT
  BONUS
  CHARGE
  FEE
  TAX
  PAYOUT
  COLLECTION
}

enum CardType {
  VISA
  RUPAY
  MASTER
  AMEX
}

enum EntityStatus {
  ACTIVE
  INACTIVE
  PENDING
  REJECTED
  SUSPENDED
}

enum SettlementType {
  INSTANT
  T_PLUS_1
  T_PLUS_2
  WEEKLY
  MONTHLY
}

// ==================== NEW REUSABLE ENUMS ====================

enum PaymentType {
  COLLECTION
  PAYOUT
  REFUND
  REVERSAL
  COMMISSION
  FEE
  TAX
  ADJUSTMENT
  CHARGE
  FUND_REQ_BANK
  FUND_REQ_RAZORPAY
}

enum WalletType {
  PRIMARY
  COMMISSION
  ESCROW
  TAX
  BONUS
  HOLDING
}

enum ApiProvider {
  BULKPE
  PAYTM
  RAZORPAY
  CCAVENUE
  BILLDESK
  AIRTEL
  JIO
  OTHER
}

// ==================== CORE USER & AUTH MODELS ====================
model Role {
  id            String   @id @default(uuid())
  name          String   @unique
  level         Int      @unique
  description   String?  @db.LongText
  createdBy     String?  @map("created_by")
  createdByUser User?    @relation("RoleCreatedBy", fields: [createdBy], references: [id])
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  users              User[]
  rolePermissions    RolePermission[]
  commissionSettings CommissionSetting[]

  @@map("roles")
}

model User {
  id String @id @default(uuid())

  username       String @db.Text
  firstName      String @map("first_name")
  lastName       String @map("last_name")
  profileImage   String @map("profile_image") @db.Text
  email          String @unique
  phoneNumber    String @unique @map("phone_number")
  password       String
  transactionPin String @map("transaction_pin") @db.Text

  // Hierarchy
  parentId String? @map("parent_id")
  parent   User?   @relation("UserHierarchy", fields: [parentId], references: [id])
  children User[]  @relation("UserHierarchy")

  hierarchyLevel Int    @map("hierarchy_level")
  hierarchyPath  String @map("hierarchy_path") @db.Text

  // Status
  status        UserStatus @default(ACTIVE)
  isKycVerified Boolean    @default(false) @map("is_kyc_verified")

  // Role
  roleId String @map("role_id")
  role   Role   @relation(fields: [roleId], references: [id])

  // Auth tokens
  refreshToken                  String?   @map("refresh_token") @db.Text
  passwordResetToken            String?   @map("password_reset_token")
  passwordResetExpires          DateTime? @map("password_reset_expires")
  emailVerificationToken        String?   @map("email_verification_token")
  emailVerifiedAt               DateTime? @map("email_verified_at")
  emailVerificationTokenExpires DateTime? @map("email_verification_token_expires")

  // Timestamps
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // ========== REUSABLE RELATIONS ==========
  // Core financial
  wallets      Wallet[]
  bankAccounts BankDetail[]

  // Transactions (ALL modules will use this)
  transactions Transaction[]

  // Commission system
  commissionTargets         CommissionSetting[] @relation("CommissionTargetUser")
  commissionSettingsCreated CommissionSetting[] @relation("CommissionSettingCreatedBy")
  commissionEarnings        CommissionEarning[] @relation("CommissionEarningToUser")
  commissionsGiven          CommissionEarning[] @relation("CommissionEarningFromUser")
  commissionEarningsCreated CommissionEarning[] @relation("CommissionEarningCreatedBy")

  // Permissions
  userPermissions UserPermission[]

  // KYC & Verification
  kycs        UserKyc[]
  piiConsents PiiConsent[]

  // Audit & Logs
  auditLogs AuditLog[]
  loginLogs LoginLogs[]

  // API Entities (ALL future modules)
  apiEntities      ApiEntity[]
  serviceProviders ServiceProvider[]

  // Reverse relations for createdBy fields
  createdRoles   Role[]          @relation("RoleCreatedBy")
  systemSettings SystemSetting[]

  @@index([parentId])
  @@index([hierarchyLevel])
  @@index([phoneNumber])
  @@map("users")
}

// ==================== UNIVERSAL API INTEGRATION FRAMEWORK ====================
model ApiEntity {
  id         String  @id @default(uuid())
  entityType String  @map("entity_type") // cc_sender, cc_beneficiary, bbps_bill, etc.
  entityId   String  @unique @map("entity_id") // senderId, beneficiaryId, billId, etc.
  reference  String? @unique // External reference

  // Core entity data
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  serviceId String?          @map("service_id")
  service   ServiceProvider? @relation(fields: [serviceId], references: [id])

  // Status
  status   EntityStatus @default(PENDING)
  isActive Boolean      @default(true) @map("is_active")

  // Provider details
  provider     ApiProvider @default(BULKPE)
  providerData Json?       @map("provider_data")

  // Flexible data storage - Different APIs need different fields
  metadata         Json?
  verificationData Json? @map("verification_data")

  // Timestamps
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  verifiedAt DateTime? @map("verified_at")

  // Relations
  transactions Transaction[]
  apiWebhooks  ApiWebhook[]

  @@index([userId, serviceId])
  @@index([entityType, entityId])
  @@index([reference])
  @@index([status, createdAt])
  @@map("api_entities")
}

model ApiWebhook {
  id            String       @id @default(uuid())
  transactionId String?      @map("transaction_id")
  transaction   Transaction? @relation(fields: [transactionId], references: [id])

  apiEntityId String?    @map("api_entity_id")
  apiEntity   ApiEntity? @relation(fields: [apiEntityId], references: [id])

  // Webhook data
  provider  ApiProvider
  eventType String      @map("event_type")
  payload   Json
  signature String? // For verification
  headers   Json? // Request headers

  // Processing status
  status        String    @default("PENDING") // PENDING, PROCESSED, FAILED
  attempts      Int       @default(0)
  lastAttemptAt DateTime? @map("last_attempt_at")
  response      Json?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([transactionId])
  @@index([apiEntityId])
  @@index([provider, eventType])
  @@map("api_webhooks")
}

// ============ User KYC & VERIFICATION MODELS ============

model UserKyc {
  id     String @id @default(uuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  firstName          String    @map("first_name")
  lastName           String    @map("last_name")
  fatherName         String    @map("father_name")
  dob                DateTime
  gender             Gender
  status             KycStatus @default(PENDING)
  type               KycTypes  @default(USER_KYC)
  kycRejectionReason String?   @map("kyc_rejection_reason") @db.LongText

  addressId String  @map("address_id")
  address   Address @relation(fields: [addressId], references: [id])

  panFile          String @map("pan_file")
  aadhaarFile      String @map("aadhaar_file")
  addressProofFile String @map("address_proof_file")
  photo            String

  piiConsents PiiConsent[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("user_kyc")
}

model BankDetail {
  id                 String      @id @default(uuid())
  accountHolder      String      @map("account_holder") @db.Text
  accountNumber      String      @unique @map("account_number") @db.VarChar(18)
  phoneNumber        String      @map("phone_number")
  accountType        AccountType @map("account_type")
  ifscCode           String      @map("ifsc_code") @db.Text
  bankName           String      @map("bank_name") @db.Text
  bankRejectionReason String?     @map("bank_rejection_reason") @db.LongText

  bankProofFile String    @map("bank_proof_file")
  status        KycStatus @default(PENDING)
  isPrimary     Boolean   @default(false) @map("is_primary")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("bank_details")
}

model State {
  id        String @id @default(uuid())
  stateName String @map("state_name")
  stateCode String @unique @map("state_code")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  Address Address[]

  @@map("states")
}

model City {
  id       String @id @default(uuid())
  cityName String @map("city_name")
  cityCode String @unique @map("city_code")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  Address Address[]

  @@map("cities")
}

model Address {
  id      String @id @default(uuid())
  address String @db.LongText
  pinCode String @map("pin_code")

  stateId String @map("state_id")
  state   State  @relation(fields: [stateId], references: [id])

  cityId String @map("city_id")
  city   City   @relation(fields: [cityId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  UserKyc UserKyc[]

  @@map("addresses")
}

model Wallet {
  id     String @id @default(uuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  // Core balances
  balance  BigInt   @default(0)
  currency Currency @default(INR)

  // Advanced balance management
  walletType       WalletType @default(PRIMARY) @map("wallet_type")
  holdBalance      BigInt     @default(0) @map("hold_balance")
  availableBalance BigInt     @default(0) @map("available_balance")

  // Limits
  dailyLimit          BigInt? @map("daily_limit")
  monthlyLimit        BigInt? @map("monthly_limit")
  perTransactionLimit BigInt? @map("per_transaction_limit")

  // Status
  isActive Boolean @default(true) @map("is_active")
  version  Int     @default(1) // Optimistic locking

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")

  // REUSABLE RELATIONS
  ledgerEntries LedgerEntry[]
  transactions  Transaction[]

  @@unique([userId, walletType])
  @@index([userId, isActive])
  @@map("wallets")
}

// ==================== UNIVERSAL COMMISSION SYSTEM ====================
model CommissionSetting {
  id    String          @id @default(uuid())
  scope CommissionScope @default(ROLE)

  // Flexible targeting
  roleId       String? @map("role_id")
  role         Role?   @relation(fields: [roleId], references: [id])
  targetUserId String? @map("target_user_id")
  targetUser   User?   @relation("CommissionTargetUser", fields: [targetUserId], references: [id])

  // Module-specific commission
  serviceId String?          @map("service_id")
  service   ServiceProvider? @relation(fields: [serviceId], references: [id])

  // Commission structure
  commissionType  CommissionType @map("commission_type")
  commissionValue Decimal        @map("commission_value") @db.Decimal(12, 4)

  // Conditions
  minAmount BigInt? @map("min_amount")
  maxAmount BigInt? @map("max_amount")

  // Tax configuration
  applyTDS   Boolean  @default(false)
  tdsPercent Decimal? @map("tds_percent") @db.Decimal(5, 2)
  applyGST   Boolean  @default(false)
  gstPercent Decimal? @map("gst_percent") @db.Decimal(5, 2)

  createdBy     String @map("created_by")
  createdByUser User   @relation("CommissionSettingCreatedBy", fields: [createdBy], references: [id])

  isActive      Boolean   @default(true) @map("is_active")
  effectiveFrom DateTime  @default(now())
  effectiveTo   DateTime?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([scope, roleId, targetUserId])
  @@index([isActive, effectiveFrom, effectiveTo])
  @@map("commission_settings")
}

model CommissionEarning {
  id String @id @default(uuid())

  // Core relationships
  transactionId String      @map("transaction_id")
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  userId String @map("user_id")
  user   User   @relation("CommissionEarningToUser", fields: [userId], references: [id])

  fromUserId String? @map("from_user_id")
  fromUser   User?   @relation("CommissionEarningFromUser", fields: [fromUserId], references: [id])

  // Commission details
  amount           BigInt
  commissionAmount BigInt         @map("commission_amount")
  commissionType   CommissionType @map("commission_type")

  // Financial tracking
  tdsAmount BigInt? @map("tds_amount")
  gstAmount BigInt? @map("gst_amount")
  netAmount BigInt  @map("net_amount")

  metadata      Json?
  createdBy     String @map("created_by")
  createdByUser User   @relation("CommissionEarningCreatedBy", fields: [createdBy], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Service provider relation
  serviceId String?
  service   ServiceProvider? @relation(fields: [serviceId], references: [id])

  @@index([transactionId, userId])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@map("commission_earnings")
}

// ==================== SERVICE PROVIDERS & PERMISSIONS ====================
model ServiceProvider {
  id            String   @id @default(uuid())
  type          String // "AEPS", "BBPS", "DMT", "RECHARGE", "CC_PAYOUT"
  code          String   @unique
  name          String?
  isActive      Boolean  @default(true)
  config        Json? // Provider-specific configuration
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @map("created_by")
  createdByUser User     @relation(fields: [createdBy], references: [id])

  // REUSABLE RELATIONS
  Transaction       Transaction[]
  CommissionSetting CommissionSetting[]
  CommissionEarning CommissionEarning[]
  UserPermission    UserPermission[]
  RolePermission    RolePermission[]
  ApiEntity         ApiEntity[]
  LedgerEntry       LedgerEntry[]

  @@map("service_providers")
}

model UserPermission {
  id        String          @id @default(uuid())
  serviceId String          @map("service_id")
  service   ServiceProvider @relation(fields: [serviceId], references: [id])

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  canView          Boolean @default(false) @map("can_view")
  canEdit          Boolean @default(false) @map("can_edit")
  canSetCommission Boolean @default(false) @map("can_set_commission")
  canProcess       Boolean @default(false) @map("can_process")

  limits Json? // Custom limits for this user

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([userId, serviceId])
  @@map("user_permissions")
}

model RolePermission {
  id        String          @id @default(uuid())
  roleId    String          @map("role_id")
  role      Role            @relation(fields: [roleId], references: [id])
  serviceId String          @map("service_id")
  service   ServiceProvider @relation(fields: [serviceId], references: [id])

  canView          Boolean @default(false) @map("can_view")
  canEdit          Boolean @default(false) @map("can_edit")
  canSetCommission Boolean @default(false) @map("can_set_commission")
  canProcess       Boolean @default(false) @map("can_process")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([roleId, serviceId])
  @@map("role_permissions")
}

// ==================== Settings ======================
model SystemSetting {
  id String @id @default(uuid())

  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id])

  companyName   String @map("company_name")
  companyLogo   String @map("company_logo")
  favIcon       String @map("fav_icon")
  phoneNumber   String @map("phone_number")
  whtsappNumber String @map("whtsapp_number")
  companyEmail  String @map("company_email")

  facebookUrl  String @map("facebook_url")
  instagramUrl String @map("instagram_url")
  twitterUrl   String @map("twitter_url")
  linkedinUrl  String @map("linkedin_url")
  websiteUrl   String @map("website_url")

  // Module-specific settings
  settings Json?

  createdAt DateTime  @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at")

  @@map("settings")
}

model LoginLogs {
  id String @id @default(uuid())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  domainName String  @map("domain_name")
  ipAddress  String  @map("ip_address")
  userAgent  String? @map("user_agent")
  location   String? @map("location") @db.LongText
  latitude   Float?  @map("latitude")
  longitude  Float?  @map("longitude")

  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([latitude, longitude])
  @@map("login_logs")
}

// ==================== UNIVERSAL TRANSACTION MODEL ====================

model Transaction {
  id             String  @id @default(uuid())
  referenceId    String? @map("reference_id")
  externalRefId  String? @map("external_ref_id")
  idempotencyKey String? @map("idempotency_key")

  // Core financial data
  amount    BigInt
  currency  Currency @default(INR)
  netAmount BigInt
  status    TxStatus @default(PENDING)

  // Module tracking - YAHAN SE SAB MODULES CONNECT HONGE
  serviceId String?          @map("service_id")
  service   ServiceProvider? @relation(fields: [serviceId], references: [id])

  paymentType PaymentType @map("payment_type")

  // Relationships - REUSABLE FOR ALL MODULES
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  walletId String @map("wallet_id")
  wallet   Wallet @relation(fields: [walletId], references: [id])

  apiEntityId String?    @map("api_entity_id")
  apiEntity   ApiEntity? @relation(fields: [apiEntityId], references: [id])

  // Financial breakdown
  providerCharge   BigInt?
  commissionAmount BigInt?
  taxAmount        BigInt? @map("tax_amount")
  feeAmount        BigInt? @map("fee_amount")
  cashbackAmount   BigInt? @map("cashback_amount")

  // Provider details
  providerReference String? @map("provider_reference")
  providerResponse  Json?   @map("provider_response")

  // Metadata - FLEXIBLE FOR ALL MODULES
  requestPayload  Json?
  responsePayload Json?
  metadata        Json?

  // Timestamps
  initiatedAt DateTime  @default(now()) @map("initiated_at")
  processedAt DateTime? @map("processed_at")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // ========== REUSABLE RELATIONS - SAB MODULES YAHAN SE ACCESSIBLE ==========
  ledgerEntries      LedgerEntry[]
  refunds            Refund[]
  commissionEarnings CommissionEarning[]
  apiWebhooks        ApiWebhook[]

  @@index([userId, status])
  @@index([idempotencyKey])
  @@index([serviceId, createdAt])
  @@index([externalRefId])
  @@index([providerReference])
  @@index([status, createdAt])
  @@map("transactions")
}

// ==================== LEDGER & AUDIT SYSTEM ====================
model LedgerEntry {
  id            String       @id @default(uuid())
  transactionId String?      @map("transaction_id")
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  walletId      String       @map("wallet_id")
  wallet        Wallet       @relation(fields: [walletId], references: [id])

  entryType     LedgerEntryType  @map("entry_type")
  referenceType ReferenceType    @map("reference_type")
  serviceId     String?          @map("service_id")
  service       ServiceProvider? @relation(fields: [serviceId], references: [id])

  amount         BigInt
  runningBalance BigInt @map("running_balance")
  narration      String @db.Text

  metadata       Json?
  idempotencyKey String? @map("idempotency_key")
  createdBy      String  @map("created_by")

  createdAt DateTime @default(now()) @map("created_at")

  @@index([transactionId])
  @@index([walletId, createdAt])
  @@index([serviceId, referenceType])
  @@index([idempotencyKey])
  @@map("ledger_entries")
}

model IdempotencyKey {
  key       String   @id
  userId    String?  @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expired_at")
  used      Boolean  @default(false)
  meta      Json?

  @@map("idempotency_keys")
}

model Refund {
  id            String      @id @default(uuid())
  transactionId String      @map("transaction_id")
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  initiatedBy   String      @map("initiated_by")
  amount        BigInt
  status        TxStatus    @default(PENDING)
  reason        String?
  metadata      Json?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("refunds")
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  action     String
  entityType String? // e.g. "User", "Transaction", "Service"
  entityId   String? // related entity record ID
  ipAddress  String? // request origin
  metadata   Json?
  createdAt  DateTime @default(now())

  @@index([entityType, entityId])
  @@map("audit_logs")
}

model PiiConsent {
  id     String @id @default(uuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  userKycId String?  @map("user_kyc_id")
  userKyc   UserKyc? @relation(fields: [userKycId], references: [id])

  piiType    String
  piiHash    String
  providedAt DateTime @default(now())
  expiresAt  DateTime
  scope      String
  createdAt  DateTime @default(now())

  @@unique([userId, piiType, scope])
  @@map("pii_consents")
}
